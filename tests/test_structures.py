import pathlib
import unittest

from mk8boards import common
from mk8boards.mk8.structures import MK8PlayerInfo, MK8GhostInfo
from mk8boards.mk8dx.structures import MK8DXGhostInfo


TEST_FILE = pathlib.Path(__file__).parent.joinpath()


class StructureTest(unittest.TestCase):
    def setUp(self) -> None:
        self.ghost_stub = MK8GhostInfo(bytes([
            0x00, 0x00, 0x04, 0x00, 0x03, 0xA0, 0x08, 0x00, 0x00, 0x01, 0xB8, 0x40, 0x00, 0x00, 0x07, 0xE0,
            0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x11,
            0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x10, 0x82, 0xC4, 0xD1, 0x13, 0x00, 0x00, 0x00, 0x1D,
            0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x04,
            0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
            0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
            0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
            0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3F,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x05,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x3A, 0x9B, 0xF0, 0x1A, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0B,
            0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
            0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x42, 0x65, 0x00, 0x00, 0x21, 0x53, 0x46, 0xA6, 0xF2, 0x00,
            0x44, 0x7A, 0x00, 0x00, 0x03, 0x00, 0x00, 0x40, 0x80, 0xE3, 0x39, 0x84, 0xE0, 0x84, 0x20, 0x50,
            0xD4, 0xD9, 0x42, 0x59, 0x9B, 0x2B, 0x8E, 0x3A, 0x2D, 0x76, 0x00, 0x00, 0xF0, 0x57, 0x76, 0x00,
            0x92, 0x01, 0xC6, 0x25, 0x4A, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x79, 0x00, 0x2D, 0x00,
            0x48, 0x30, 0x65, 0x38, 0x02, 0x00, 0x22, 0x00, 0x31, 0x68, 0x43, 0x18, 0x0C, 0x34, 0x45, 0x14,
            0x81, 0x12, 0x16, 0x69, 0x0D, 0x00, 0x00, 0x29, 0x00, 0x52, 0x48, 0x50, 0x44, 0x00, 0x69, 0x00,
            0x6E, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x61, 0x00, 0x77, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xD9, 0x8B, 0x31, 0x24, 0x00, 0x00, 0x31, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x01, 0xFF, 0x0F, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00,
            0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x79, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00,
            0x00, 0x1F, 0x00, 0x00, 0x2B, 0xDA, 0x6D, 0xF8, 0xE8, 0x11, 0x11, 0xE3, 0x87, 0x75, 0x95, 0x1D,
            0xB8, 0xF8, 0x1A, 0x1D, 0x00, 0x76, 0x01, 0x92, 0x25, 0xC6, 0x00, 0x4A, 0x00, 0x69, 0x00, 0x6D,
            0x00, 0x6D, 0x00, 0x79, 0x00, 0x2D, 0x30, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x20, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00,
            0x01, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x03, 0x62, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x17, 0x00,
            0x00, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xCD, 0x80, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x3B, 0x00,
            0x03, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x3B, 0x00, 0x03, 0xE7, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x3B, 0x00, 0x03, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]))

    def test_player_data(self) -> None:
        info = MK8PlayerInfo(bytes([
            0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x52, 0x63, 0x00, 0x00, 0x2E, 0x13, 0x46, 0xBF, 0x0E, 0x00,
            0x44, 0x7A, 0x00, 0x00, 0x03, 0x00, 0x00, 0x40, 0x80, 0xE3, 0x39, 0x84, 0xE0, 0x84, 0x20, 0x50,
            0xD4, 0xD9, 0x42, 0x59, 0x9B, 0x2B, 0x8E, 0x3A, 0x2D, 0x76, 0x00, 0x00, 0xF0, 0x57, 0x76, 0x00,
            0x92, 0x01, 0xC6, 0x25, 0x4A, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x79, 0x00, 0x2D, 0x00,
            0x48, 0x30, 0x65, 0x38, 0x02, 0x00, 0x22, 0x00, 0x31, 0x68, 0x43, 0x18, 0x0C, 0x34, 0x45, 0x14,
            0x81, 0x12, 0x16, 0x69, 0x0D, 0x00, 0x00, 0x29, 0x00, 0x52, 0x48, 0x50, 0x44, 0x00, 0x69, 0x00,
            0x6E, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x61, 0x00, 0x77, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xD9, 0x8B, 0x31, 0x24, 0xFF, 0xFF, 0x31, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x01, 0xFF, 0x0F, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00,
            0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x79, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00,
            0x00, 0x1F, 0x00, 0xFF, 0x2B, 0xDA, 0x6D, 0xF8, 0xE8, 0x11, 0x11, 0xE3, 0x87, 0x75, 0x95, 0x1D,
            0xB8, 0xF8, 0x1A, 0x1D,
        ]))
        self.assertEqual('vƒ◆Jimmy-え', info.mii.mii_name)
        self.assertEqual(0x31, info.country_id)
        self.assertEqual('USA', info.country_code)
        self.assertEqual('United States', info.country)
        self.assertEqual(0x24, info.subregion_id)
        self.assertEqual('New York', info.subregion)

        uuid = b'\x2B\xDA\x6D\xF8\xE8\x11\x11\xE3\x87\x75\x95\x1D\xB8\xF8\x1A\x1D'
        self.assertEqual(info.profile_id.bytes, uuid)

    def test_ghost(self) -> None:
        self.assertEqual(0x400, len(self.ghost_stub.data))
        self.assertIn('4.1', self.ghost_stub.version)

        timestamp = (self.ghost_stub.year, self.ghost_stub.month, self.ghost_stub.day, self.ghost_stub.weekday,
                     self.ghost_stub.hour, self.ghost_stub.min, self.ghost_stub.sec)
        self.assertEqual((2016, 8, 4, common.Weekdays.THURSDAY, 17, 58, 16), timestamp)

        # Combo Info
        self.assertEqual(common.Characters.MORTON, self.ghost_stub.character)
        self.assertEqual(0, self.ghost_stub.variant)
        self.assertEqual(0, self.ghost_stub.mii_weight)
        self.assertEqual(common.MK8VehicleBodies.BLUE_FALCON, self.ghost_stub.vehicle_body)
        self.assertEqual(common.Tires.CYBER_SLICK, self.ghost_stub.tire)
        self.assertEqual(common.Gliders.GOLD_GLIDER, self.ghost_stub.glider)

        # Race Settings
        self.assertEqual(common.MK8Tracks.BIG_BLUE, self.ghost_stub.track)
        self.assertEqual(False, self.ghost_stub.online)
        self.assertEqual(1, self.ghost_stub.gamemode)
        self.assertEqual(2, self.ghost_stub.num_racers)
        self.assertEqual('150cc', self.ghost_stub.engine_class)
        self.assertEqual(False, self.ghost_stub.mirror)
        self.assertEqual(0, self.ghost_stub.team)

        # Mii Data
        self.assertEqual('vƒ◆Jimmy-え', self.ghost_stub.mii.mii_name)
        self.assertEqual(b'\xD9\x8B', self.ghost_stub.mii_crc16)

        # Location: Country Info
        self.assertEqual(0x31, self.ghost_stub.country_id)
        self.assertEqual('USA', self.ghost_stub.country_code)
        self.assertEqual('United States', self.ghost_stub.country)

        # Location: Region Info
        self.assertEqual(0x24, self.ghost_stub.subregion_id)
        self.assertEqual('New York', self.ghost_stub.subregion)

        # Player Name
        self.assertEqual('vƒ◆Jimmy-え', self.ghost_stub.player_name)

        # Total Time and Splits
        self.assertEqual('1:23.216', str(self.ghost_stub.total_time))
        self.assertEqual(['0:32.033', '0:20.317', '0:30.866'], [str(x) for x in self.ghost_stub.lap_times])

    def test_filename(self) -> None:
        filename_common = (
            '3f1c00001d0f0b1170d802002101413d01e36293b3e793b3e7'
            '0076019225c6004a0069006d006d0079002d30483100000093b3e793b3e7.dat'
        )

        for x in range(16):
            self.assertEqual(f'dg{x:02x}{filename_common}', self.ghost_stub.generate_filename('dg', slot=x))
        self.assertEqual(f'sg2f{filename_common}', self.ghost_stub.generate_filename('sg'))

        self.ghost_stub.motion = True
        self.assertTrue(self.ghost_stub.generate_filename('dg')[96:98] == '01')


class Structure8DXTest(unittest.TestCase):
    def setUp(self) -> None:
        self.ghost_stub = MK8DXGhostInfo(bytes([
            0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x40, 0x60, 0x01, 0x00, 0xE7, 0x07, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
            0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xF5, 0x8B, 0x14, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9A, 0x1C, 0x18, 0x90, 0x09, 0x00, 0x00, 0x00,
            0x0D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x35, 0x00, 0x00, 0x00, 0xDD, 0x2F, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x7A, 0x44,
            0x00, 0x60, 0x81, 0x44, 0xEC, 0xF4, 0x08, 0xE7, 0x9D, 0x71, 0x4A, 0x44, 0xB5, 0x17, 0xF6, 0xDC,
            0xF5, 0x4D, 0xAF, 0x5B, 0x4A, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x79, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x67, 0x38, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x00, 0x22, 0x03, 0x00, 0x31, 0x42, 0x04, 0x03, 0x03, 0x02, 0x0C, 0x0C,
            0x05, 0x04, 0x03, 0x05, 0x02, 0x0A, 0x01, 0x04, 0x09, 0x16, 0x13, 0x04, 0x03, 0x0D, 0x08, 0x00,
            0x00, 0x04, 0x0A, 0x00, 0x08, 0x04, 0x0A, 0x00, 0x04, 0x02, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x53, 0x55, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0xFF, 0x0F, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0x1F, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x7F, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
            0x2A, 0xD8, 0x8C, 0xE7, 0x47, 0x20, 0x00, 0x10, 0x8C, 0xD9, 0x1B, 0x67, 0x62, 0x98, 0xCE, 0x8A,
            0x76, 0x00, 0x92, 0x01, 0xC6, 0x25, 0x4A, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x79, 0x00,
            0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x88, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x97, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x16, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x3B, 0xE7, 0x03,
            0x00, 0x00, 0x00, 0x00, 0x09, 0x3B, 0xE7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x09, 0x3B, 0xE7, 0x03,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x4D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x31, 0x34, 0x05, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]) + (b'\0' * 0x860))

    def test_ghost(self) -> None:
        self.assertEqual(0xC00, len(self.ghost_stub.data))

        timestamp = (self.ghost_stub.year, self.ghost_stub.month, self.ghost_stub.day, self.ghost_stub.weekday,
                     self.ghost_stub.hour, self.ghost_stub.min, self.ghost_stub.sec)
        self.assertEqual((2023, 3, 19, common.Weekdays.SUNDAY, 13, 19, 0), timestamp)

        # Combo Info
        self.assertEqual(common.Characters.YOSHI, self.ghost_stub.character)
        self.assertEqual(2, self.ghost_stub.variant)
        self.assertEqual(0, self.ghost_stub.mii_weight)
        self.assertEqual(common.MK8VehicleBodies.BIDDYBUGGY, self.ghost_stub.vehicle_body)
        self.assertEqual(common.Tires.AZURE_ROLLER, self.ghost_stub.tire)
        self.assertEqual(common.Gliders.CLOUD_GLIDER, self.ghost_stub.glider)

        # Race Settings
        self.assertEqual(common.BoosterTracks.GBA_RIVERSIDE_PARK, self.ghost_stub.track)
        self.assertEqual('200cc', self.ghost_stub.engine_class)

        # Mii Data
        self.assertEqual('Jimmy', self.ghost_stub.mii.mii_name)

        # Location: Country Info
        self.assertEqual('US', self.ghost_stub.country_id)

        # Player Name
        self.assertEqual('vƒ◆Jimmy-', self.ghost_stub.player_name)

        # Total Time and Splits
        self.assertEqual('1:03.333', str(self.ghost_stub.total_time))
        self.assertEqual(['0:22.648', '0:20.407', '0:20.278'], [str(x) for x in self.ghost_stub.lap_times])

    def test_filename_dg(self) -> None:
        for x in range(32):
            self.assertEqual(f'dg{x:02d}.dat', self.ghost_stub.generate_filename('dg', slot=x))

    def test_filename_staff(self) -> None:
        self.assertEqual(
            # Filename is purposely broken up onto two lines
            'fg4964040200090d0110314d016288014197014116000000000000000000000000'
            '0076019225c6004a0069006d006d0079002d00005553000000.dat',
            self.ghost_stub.generate_filename('fg', staff_ghost=True)
        )

        self.ghost_stub.track = common.MK8Tracks.N64_RAINBOW_ROAD
        self.assertTrue(self.ghost_stub.generate_filename('fg', staff_ghost=True).startswith('fg1f2f'))

        self.ghost_stub.motion = True
        self.assertTrue(self.ghost_stub.generate_filename('fg', staff_ghost=True).endswith('010000.dat'))


if __name__ == '__main__':
    unittest.main()
