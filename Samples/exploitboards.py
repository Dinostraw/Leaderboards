import logging
import os
from time import gmtime, strftime, time

import anyio
import pandas as pd
from dotenv import load_dotenv

from mk8boards.mk8.boards import filter_boards, get_boards, get_nnids_from_boards
from mk8boards.mk8.extract_info import MK8PlayerInfo
from mk8boards.mk8.mk8 import MK8Client, MK8Tracks as Tracks
from mk8boards.mk8.timesheet import format_time

logging.basicConfig(level=logging.INFO)

# Load environment variables
load_dotenv()

# --- Device Information ---
DEVICE_ID = int(os.getenv("DEVICE_ID"), base=16)
SERIAL_NUMBER = os.getenv("SERIAL_NUMBER")
SYSTEM_VERSION = int(os.getenv("SYSTEM_VERSION"), base=16)
# --- Region and Language Information ---
COUNTRY_ID = int(os.getenv("REGION_ID"))
COUNTRY_NAME = os.getenv("COUNTRY_NAME")
REGION_ID = int(os.getenv("REGION_ID"))
REGION_NAME = os.getenv("REGION_NAME")
LANGUAGE = os.getenv("LANGUAGE")
# --- Account Information ---
USERNAME = os.getenv("NNID_USERNAME")
PASSWORD = os.getenv("PASSWORD")

# Modify in between here =================================================================================
OFFSET = 0  # Start at (x+1)th place (only 0 through 999 are valid)
OFFSET_NNID = ""  # Optional; OVERRIDES order_param.offset. Starts at specific player's time
COUNT = 1450  # Download x number of times
TRACK_ID = Tracks.GBA_CHEESE_LAND.id_
# ========================================================================================================


async def main():
    mk8_client = MK8Client(DEVICE_ID, SERIAL_NUMBER, SYSTEM_VERSION, COUNTRY_ID,
                           COUNTRY_NAME, REGION_ID, REGION_NAME, LANGUAGE,
                           USERNAME, PASSWORD)
    await mk8_client.login()

    if OFFSET_NNID:
        rankings = await get_boards(mk8_client, TRACK_ID, OFFSET, COUNT,
                                    pid=await mk8_client.nnas.get_pid(OFFSET_NNID))
    else:
        rankings = await get_boards(mk8_client, TRACK_ID, OFFSET, COUNT)

    rankings = filter_boards(rankings)
    timestamp = strftime("%Y-%m-%d %H-%M", gmtime(time()))
    nnids = await get_nnids_from_boards(mk8_client.nnas, rankings)

    # print("Rankings:")
    # for rankdata in rankings.data:
    #     time = format_time(rankdata.score)
    #     print("\t%5i   %20s   %s" % (rankdata.rank, nnids[rankdata.pid], time))

    player_info = [MK8PlayerInfo(x.common_data) for x in rankings.data]
    data = [(x.rank, x.score, bool(x.groups[0]), p.country_code, p.country,
             p.subregion, p.mii_name, nnids[x.pid], x.pid)
            for x, p in zip(rankings.data, player_info)]

    filename = f"../Output/Boards/{TRACK_ID} WW {timestamp}"

    df = pd.DataFrame(data, columns=["rank", "raw_time", "motion", "alpha-3", "country",
                                     "region", "name", "nnid", "pid"])
    df.insert(2, "time", df["raw_time"], allow_duplicates=True)
    df["time"] = df["time"].apply(lambda x: f"{format_time(x)}")
    df.to_csv(f"{filename}.csv", encoding="utf-8-sig", index=False)

    df["time"] = df["time"].apply(lambda x: f"'{x}")
    df["pid"] = df["pid"].apply(lambda x: f"'{x}")
    df.to_excel(f"{filename}.xlsx", index=False)


if __name__ == "__main__":
    anyio.run(main)
    # input("Press Enter to exit...")
